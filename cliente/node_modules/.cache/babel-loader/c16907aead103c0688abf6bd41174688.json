{"ast":null,"code":"var _jsxFileName = \"D:\\\\Scripts\\\\React103\\\\cliente\\\\src\\\\context\\\\proyectos\\\\proyectoState.js\";\nimport React, { useReducer } from 'react'; //import {v4 as uuidv4} from 'uuid';\n\nimport proyectoContext from './proyectoContext';\nimport proyectoReducer from './proyectoReducer'; //importamos los types\n\nimport { FORMULARIO_TAREA, OBTENER_PROYECTOS, AGREGAR_PROYECTO, PROYECTO_ERROR, VALIDAR_FORMULARIO, PROYECTO_ACTUAL, ELIMINAR_PROYECTO } from '../../types';\nimport clienteAxios from '../../config/axios'; //en gral esto es un hook\n//agregamos nueva variable proyectoState que sera el state inicial\n\nconst ProyectoState = props => {\n  /*\n  const proyectos = [   \n      {id: 1, nombre: 'Trabajo en Altura' },\n      {id: 2, nombre: 'Trabajo en Caliente' },\n      {id: 3, nombre: 'Trabajo de Bloqueo' },\n      {id: 4, nombre: 'Trabajo de Izaje' }\n  ]\n   */\n  //aca se cargan todos los states que estan en el inicio\n  const initialState = {\n    proyectos: [],\n    formulario: false,\n    errorformulario: false,\n    //aca proyecto será la tarea selecionada en el menu de la izq.\n    proyecto: null,\n    mensaje: null\n  }; //dispatch para ejecutar las acciones o types, es un hook\n  //useReducer es similar a useState\n\n  const [state, dispatch] = useReducer(proyectoReducer, initialState); //Serie de funciones para el CRUD\n\n  const mostrarFormulario = () => {\n    dispatch({\n      type: FORMULARIO_TAREA\n    });\n  }; //Obtener los proyectos\n\n\n  const obtenerProyectos = async () => {\n    try {\n      const resultado = await clienteAxios.get('/api/proyectos');\n      dispatch({\n        type: OBTENER_PROYECTOS,\n        payload: resultado.data.proyectos\n      });\n    } catch (error) {\n      const alerta = {\n        msg: 'Hubo un error',\n        categoria: 'alerta-error'\n      };\n      dispatch({\n        type: PROYECTO_ERROR,\n        payload: alerta\n      });\n    }\n  }; //Agregar nuevo proyecto\n\n\n  const agregarProyecto = async proyecto => {\n    //Aca se agrega el id\n    //proyecto.id = uuidv4();\n    try {\n      const resultado = await clienteAxios.post('/api/proyectos', proyecto);\n      console.log(resultado); //Insertar el poyecto en el state\n\n      dispatch({\n        type: AGREGAR_PROYECTO,\n        payload: resultado.data\n      });\n    } catch (error) {\n      const alerta = {\n        msg: 'Hubo un error',\n        categoria: 'alerta-error'\n      };\n      dispatch({\n        type: PROYECTO_ERROR,\n        payload: alerta\n      });\n    }\n  }; //Validar el formulario por errores\n\n\n  const mostrarError = () => {\n    dispatch({\n      type: VALIDAR_FORMULARIO\n    });\n  }; // funcion que Selecciona la Tarea que el usuario hizo click\n  //proyectoActual le pasaremos como payload-> proyecto en un arraw fucntion\n\n\n  const proyectoActual = proyectoId => {\n    dispatch({\n      type: PROYECTO_ACTUAL,\n      payload: proyectoId\n    });\n  }; //elimina un proyecto\n\n\n  const eliminarProyecto = async proyectoId => {\n    try {\n      await clienteAxios.delete(`/api/proyectos/${proyectoId}`);\n      dispatch({\n        type: ELIMINAR_PROYECTO,\n        payload: proyectoId\n      });\n    } catch (error) {\n      const alerta = {\n        msg: 'Hubo un error',\n        categoria: 'alerta-error'\n      };\n      dispatch({\n        type: PROYECTO_ERROR,\n        payload: alerta //console.log(error);  \n\n      });\n    }\n  };\n\n  return (\n    /*#__PURE__*/\n    //desde aqui nacen los datos\n    //le pasamos props.children para lo que le vallamos a pasar\n    //los diferentes componentes que sean hijos del provider\n    //se pasen los datos a lo largo de todos los diferenrtes componentes\n    //formulacio = state; mostrarFormulario = funcion\n    React.createElement(proyectoContext.Provider, {\n      value: {\n        //se recomienda poner los states arriba y las funciones abajo\n        proyectos: state.proyectos,\n        formulario: state.formulario,\n        errorformulario: state.errorformulario,\n        //proyecto contine el valor que tendra del state.proyecto\n        proyecto: state.proyecto,\n        mensaje: state.mensaje,\n        mostrarFormulario,\n        obtenerProyectos,\n        agregarProyecto,\n        mostrarError,\n        proyectoActual,\n        eliminarProyecto\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 147,\n        columnNumber: 9\n      }\n    }, props.children)\n  );\n};\n\nexport default ProyectoState;","map":{"version":3,"sources":["D:/Scripts/React103/cliente/src/context/proyectos/proyectoState.js"],"names":["React","useReducer","proyectoContext","proyectoReducer","FORMULARIO_TAREA","OBTENER_PROYECTOS","AGREGAR_PROYECTO","PROYECTO_ERROR","VALIDAR_FORMULARIO","PROYECTO_ACTUAL","ELIMINAR_PROYECTO","clienteAxios","ProyectoState","props","initialState","proyectos","formulario","errorformulario","proyecto","mensaje","state","dispatch","mostrarFormulario","type","obtenerProyectos","resultado","get","payload","data","error","alerta","msg","categoria","agregarProyecto","post","console","log","mostrarError","proyectoActual","proyectoId","eliminarProyecto","delete","children"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,UAAhB,QAAkC,OAAlC,C,CAEA;;AAEA,OAAOC,eAAP,MAA4B,mBAA5B;AACA,OAAOC,eAAP,MAA4B,mBAA5B,C,CACA;;AACA,SAASC,gBAAT,EACSC,iBADT,EAESC,gBAFT,EAGSC,cAHT,EAISC,kBAJT,EAKSC,eALT,EAMSC,iBANT,QAOO,aAPP;AASA,OAAOC,YAAP,MAAyB,oBAAzB,C,CAEA;AACA;;AACA,MAAMC,aAAa,GAAGC,KAAK,IAAI;AAC3B;;;;;;;;AAQA;AACA,QAAMC,YAAY,GAAG;AACjBC,IAAAA,SAAS,EAAG,EADK;AAEjBC,IAAAA,UAAU,EAAG,KAFI;AAGjBC,IAAAA,eAAe,EAAE,KAHA;AAIjB;AACAC,IAAAA,QAAQ,EAAE,IALO;AAMjBC,IAAAA,OAAO,EAAE;AANQ,GAArB,CAV2B,CAoB3B;AACA;;AACA,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBpB,UAAU,CAACE,eAAD,EAAkBW,YAAlB,CAApC,CAtB2B,CAwB3B;;AACA,QAAMQ,iBAAiB,GAAG,MAAM;AAC5BD,IAAAA,QAAQ,CAAC;AACLE,MAAAA,IAAI,EAAEnB;AADD,KAAD,CAAR;AAGH,GAJD,CAzB2B,CA+B3B;;;AACA,QAAMoB,gBAAgB,GAAG,YAAY;AAClC,QAAI;AACC,YAAMC,SAAS,GAAG,MAAMd,YAAY,CAACe,GAAb,CAAiB,gBAAjB,CAAxB;AAEAL,MAAAA,QAAQ,CAAC;AACLE,QAAAA,IAAI,EAAElB,iBADD;AAELsB,QAAAA,OAAO,EAAEF,SAAS,CAACG,IAAV,CAAeb;AAFnB,OAAD,CAAR;AAIJ,KAPD,CAOE,OAAOc,KAAP,EAAc;AACX,YAAMC,MAAM,GAAE;AACVC,QAAAA,GAAG,EAAE,eADK;AAEVC,QAAAA,SAAS,EAAE;AAFD,OAAd;AAKAX,MAAAA,QAAQ,CAAC;AACLE,QAAAA,IAAI,EAAEhB,cADD;AAELoB,QAAAA,OAAO,EAAEG;AAFJ,OAAD,CAAR;AAIH;AACJ,GAnBD,CAhC2B,CAqD3B;;;AACA,QAAMG,eAAe,GAAG,MAAMf,QAAN,IAAkB;AACtC;AACA;AAEA,QAAI;AACA,YAAMO,SAAS,GAAG,MAAMd,YAAY,CAACuB,IAAb,CAAkB,gBAAlB,EAAoChB,QAApC,CAAxB;AACAiB,MAAAA,OAAO,CAACC,GAAR,CAAYX,SAAZ,EAFA,CAGA;;AACAJ,MAAAA,QAAQ,CAAC;AACLE,QAAAA,IAAI,EAAEjB,gBADD;AAELqB,QAAAA,OAAO,EAAEF,SAAS,CAACG;AAFd,OAAD,CAAR;AAIH,KARD,CAQE,OAAOC,KAAP,EAAc;AACZ,YAAMC,MAAM,GAAE;AACVC,QAAAA,GAAG,EAAE,eADK;AAEVC,QAAAA,SAAS,EAAE;AAFD,OAAd;AAKAX,MAAAA,QAAQ,CAAC;AACLE,QAAAA,IAAI,EAAEhB,cADD;AAELoB,QAAAA,OAAO,EAAEG;AAFJ,OAAD,CAAR;AAKH;AACJ,GAxBD,CAtD2B,CAgF3B;;;AACA,QAAMO,YAAY,GAAG,MAAM;AACvBhB,IAAAA,QAAQ,CAAC;AACLE,MAAAA,IAAI,EAAEf;AADD,KAAD,CAAR;AAGH,GAJD,CAjF2B,CAuF3B;AACA;;;AACA,QAAM8B,cAAc,GAAGC,UAAU,IAAI;AACjClB,IAAAA,QAAQ,CAAC;AACLE,MAAAA,IAAI,EAAEd,eADD;AAELkB,MAAAA,OAAO,EAAEY;AAFJ,KAAD,CAAR;AAIH,GALD,CAzF2B,CAgG3B;;;AACA,QAAMC,gBAAgB,GAAG,MAAMD,UAAN,IAAoB;AACvC,QAAI;AACA,YAAM5B,YAAY,CAAC8B,MAAb,CAAqB,kBAAiBF,UAAW,EAAjD,CAAN;AACAlB,MAAAA,QAAQ,CAAC;AACPE,QAAAA,IAAI,EAAEb,iBADC;AAEPiB,QAAAA,OAAO,EAAEY;AAFF,OAAD,CAAR;AAKH,KAPD,CAOE,OAAOV,KAAP,EAAc;AACZ,YAAMC,MAAM,GAAG;AACXC,QAAAA,GAAG,EAAE,eADM;AAEXC,QAAAA,SAAS,EAAE;AAFA,OAAf;AAKAX,MAAAA,QAAQ,CAAC;AACLE,QAAAA,IAAI,EAAEhB,cADD;AAELoB,QAAAA,OAAO,EAAEG,MAFJ,CAGL;;AAHK,OAAD,CAAR;AAMH;AACN,GArBD;;AAuBA;AAAA;AACI;AACA;AACA;AACA;AACA;AACA,wBAAC,eAAD,CAAiB,QAAjB;AACI,MAAA,KAAK,EAAE;AACH;AACAf,QAAAA,SAAS,EAAEK,KAAK,CAACL,SAFd;AAGHC,QAAAA,UAAU,EAAEI,KAAK,CAACJ,UAHf;AAIHC,QAAAA,eAAe,EAAEG,KAAK,CAACH,eAJpB;AAKH;AACAC,QAAAA,QAAQ,EAAEE,KAAK,CAACF,QANb;AAOHC,QAAAA,OAAO,EAAEC,KAAK,CAACD,OAPZ;AAQHG,QAAAA,iBARG;AASHE,QAAAA,gBATG;AAUHS,QAAAA,eAVG;AAWHI,QAAAA,YAXG;AAYHC,QAAAA,cAZG;AAaHE,QAAAA;AAbG,OADX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAiBK3B,KAAK,CAAC6B,QAjBX;AANJ;AA0BH,CAlJD;;AAoJA,eAAe9B,aAAf","sourcesContent":["import React, { useReducer } from 'react';\n\n//import {v4 as uuidv4} from 'uuid';\n\nimport proyectoContext from './proyectoContext';\nimport proyectoReducer from './proyectoReducer'; \n//importamos los types\nimport { FORMULARIO_TAREA, \n         OBTENER_PROYECTOS ,\n         AGREGAR_PROYECTO,\n         PROYECTO_ERROR,\n         VALIDAR_FORMULARIO,\n         PROYECTO_ACTUAL,\n         ELIMINAR_PROYECTO\n} from '../../types';\n\nimport clienteAxios from '../../config/axios';\n\n//en gral esto es un hook\n//agregamos nueva variable proyectoState que sera el state inicial\nconst ProyectoState = props => {\n    /*\n    const proyectos = [   \n        {id: 1, nombre: 'Trabajo en Altura' },\n        {id: 2, nombre: 'Trabajo en Caliente' },\n        {id: 3, nombre: 'Trabajo de Bloqueo' },\n        {id: 4, nombre: 'Trabajo de Izaje' }\n    ]\n     */\n    //aca se cargan todos los states que estan en el inicio\n    const initialState = {\n        proyectos : [],\n        formulario : false,\n        errorformulario: false,\n        //aca proyecto será la tarea selecionada en el menu de la izq.\n        proyecto: null,\n        mensaje: null\n    }\n             \n\n    //dispatch para ejecutar las acciones o types, es un hook\n    //useReducer es similar a useState\n    const [state, dispatch] = useReducer(proyectoReducer, initialState)\n\n    //Serie de funciones para el CRUD\n    const mostrarFormulario = () => {\n        dispatch({\n            type: FORMULARIO_TAREA\n        })\n    }\n\n    //Obtener los proyectos\n    const obtenerProyectos = async () => {\n       try {\n            const resultado = await clienteAxios.get('/api/proyectos');\n            \n            dispatch({\n                type: OBTENER_PROYECTOS,\n                payload: resultado.data.proyectos\n            }) \n       } catch (error) {\n            const alerta ={\n                msg: 'Hubo un error',\n                categoria: 'alerta-error'\n            }\n\n            dispatch({\n                type: PROYECTO_ERROR,\n                payload: alerta        \n            })  \n        }\n    }\n\n    //Agregar nuevo proyecto\n    const agregarProyecto = async proyecto => {\n        //Aca se agrega el id\n        //proyecto.id = uuidv4();\n\n        try {\n            const resultado = await clienteAxios.post('/api/proyectos', proyecto );\n            console.log(resultado);\n            //Insertar el poyecto en el state\n            dispatch({               \n                type: AGREGAR_PROYECTO,\n                payload: resultado.data\n            })\n        } catch (error) {\n            const alerta ={\n                msg: 'Hubo un error',\n                categoria: 'alerta-error'\n            }\n\n            dispatch({\n                type: PROYECTO_ERROR,\n                payload: alerta\n              \n            })\n        }\n    }\n\n    //Validar el formulario por errores\n    const mostrarError = () => {\n        dispatch({\n            type: VALIDAR_FORMULARIO\n        })\n    }\n\n    // funcion que Selecciona la Tarea que el usuario hizo click\n    //proyectoActual le pasaremos como payload-> proyecto en un arraw fucntion\n    const proyectoActual = proyectoId => {\n        dispatch({\n            type: PROYECTO_ACTUAL,\n            payload: proyectoId\n        })\n    }\n\n    //elimina un proyecto\n    const eliminarProyecto = async proyectoId => {\n          try {\n              await clienteAxios.delete(`/api/proyectos/${proyectoId}`);\n              dispatch({\n                type: ELIMINAR_PROYECTO,\n                payload: proyectoId\n            }) \n\n          } catch (error) {\n              const alerta = {\n                  msg: 'Hubo un error',\n                  categoria: 'alerta-error'\n              }\n\n              dispatch({\n                  type: PROYECTO_ERROR,\n                  payload: alerta\n                  //console.log(error);  \n              })\n              \n          }\n    }\n    \n    return (\n        //desde aqui nacen los datos\n        //le pasamos props.children para lo que le vallamos a pasar\n        //los diferentes componentes que sean hijos del provider\n        //se pasen los datos a lo largo de todos los diferenrtes componentes\n        //formulacio = state; mostrarFormulario = funcion\n        <proyectoContext.Provider\n            value={{\n                //se recomienda poner los states arriba y las funciones abajo\n                proyectos: state.proyectos,\n                formulario: state.formulario,\n                errorformulario: state.errorformulario,\n                //proyecto contine el valor que tendra del state.proyecto\n                proyecto: state.proyecto,\n                mensaje: state.mensaje,\n                mostrarFormulario,\n                obtenerProyectos,\n                agregarProyecto,\n                mostrarError,\n                proyectoActual,\n                eliminarProyecto\n            }}      \n        >\n            {props.children}\n        </proyectoContext.Provider>\n    )\n}\n\nexport default ProyectoState;"]},"metadata":{},"sourceType":"module"}