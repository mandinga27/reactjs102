{"ast":null,"code":"var _jsxFileName = \"D:\\\\Scripts\\\\React103\\\\cliente\\\\src\\\\context\\\\tareas\\\\tareaState.js\";\nimport React, { useReducer } from 'react';\nimport TareaContext from './tareaContext';\nimport TareaReducer from './tareaReducer';\nimport { TAREAS_PROYECTO, AGREAGAR_TAREA, VALIDAR_TAREA, ELIMINAR_TAREA, ESTADO_TAREA, TAREA_ACTUAL, ACTUALIAR_TAREA, LIMPIAR_TAREA } from '../../types';\n\nconst TareaState = props => {\n  const initialState = {\n    tareas: [{\n      id: 1,\n      nombre: 'Trabajo en Caliente',\n      estado: true,\n      proyectoId: 1\n    }, {\n      id: 2,\n      nombre: 'Trabajo en Alturas',\n      estado: false,\n      proyectoId: 2\n    }, {\n      id: 3,\n      nombre: 'Izajes',\n      estado: false,\n      proyectoId: 3\n    }, {\n      id: 4,\n      nombre: 'Bloqueo',\n      estado: true,\n      proyectoId: 4\n    }, {\n      id: 5,\n      nombre: 'Trabajo en Alturas',\n      estado: true,\n      proyectoId: 2\n    }, {\n      id: 6,\n      nombre: 'Bloqueo',\n      estado: false,\n      proyectoId: 4\n    }, {\n      id: 7,\n      nombre: 'Izajes',\n      estado: false,\n      proyectoId: 3\n    }, {\n      id: 8,\n      nombre: 'Trabajo en Caliente',\n      estado: true,\n      proyectoId: 1\n    }],\n    //crearemos un state para tareas proyecto\n    //esto es para que en el inicio no halla ninguna tarea seleccionada\n    //tiene que seleccionar alguna tarea\n    tareasproyecto: null,\n    //errortarea si el usuario comete un error pasa a true\n    errortarea: false,\n    //la primera vez que carge nuestra aplicacion no tendra ninguna tarea seleccionada\n    tareaseleccionada: null\n  }; //crear dispatch y state\n\n  const [state, dispatch] = useReducer(TareaReducer, initialState); //Crear las funciones\n  //1. Obtener las tareas de un proyecto\n  //esta funcion la vamos a utilizar en proyecto de Proyecto.js\n\n  const obtenerTareas = proyectoId => {\n    //la funcion obtener tareas se va a ejecutar cuando el usuario seleccione un proyecto\n    //en Proyecto.js onClick\n    //para eso hay que crear el reducer\n    dispatch({\n      type: TAREAS_PROYECTO,\n      payload: proyectoId\n    });\n  }; //2. Agregar una tareas al proyecto seleccionado\n\n\n  const agregarTarea = tarea => {\n    dispatch({\n      type: AGREAGAR_TAREA,\n      payload: tarea\n    });\n  }; //Valida y muestra un error en caso de que sea necesario\n\n\n  const validarTarea = () => {\n    dispatch({\n      type: VALIDAR_TAREA //no va tomar ningun payload\n\n    });\n  }; //Eliminar tarea por id\n\n\n  const eliminarTarea = id => {\n    dispatch({\n      type: ELIMINAR_TAREA,\n      payload: id\n    });\n  }; //Cambia el estado de cada tarea\n\n\n  const cambiarEstadoTarea = tarea => {\n    dispatch({\n      type: ESTADO_TAREA,\n      payload: tarea\n    });\n  }; //Extrae una tare para edicion\n\n\n  const guardarTareaActual = tarea => {\n    dispatch({\n      type: TAREA_ACTUAL,\n      payload: tarea\n    });\n  }; //Edita o modifica una tarea\n\n\n  const actualizarTarea = tarea => {\n    dispatch({\n      type: ACTUALIAR_TAREA,\n      payload: tarea\n    });\n  }; //Elimina la tarea seleccionada\n\n\n  const limpiarTarea = () => {\n    dispatch({\n      type: LIMPIAR_TAREA\n    });\n  };\n\n  return (\n    /*#__PURE__*/\n    //vamos a pasar las tareas al Provider\n    React.createElement(TareaContext.Provider, {\n      value: {\n        tareas: state.tareas,\n        tareasproyecto: state.tareasproyecto,\n        errortarea: state.errortarea,\n        tareaseleccionada: state.tareaseleccionada,\n        obtenerTareas,\n        agregarTarea,\n        validarTarea,\n        eliminarTarea,\n        cambiarEstadoTarea,\n        guardarTareaActual,\n        actualizarTarea,\n        limpiarTarea\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 115,\n        columnNumber: 9\n      }\n    }, props.children)\n  );\n};\n\nexport default TareaState;","map":{"version":3,"sources":["D:/Scripts/React103/cliente/src/context/tareas/tareaState.js"],"names":["React","useReducer","TareaContext","TareaReducer","TAREAS_PROYECTO","AGREAGAR_TAREA","VALIDAR_TAREA","ELIMINAR_TAREA","ESTADO_TAREA","TAREA_ACTUAL","ACTUALIAR_TAREA","LIMPIAR_TAREA","TareaState","props","initialState","tareas","id","nombre","estado","proyectoId","tareasproyecto","errortarea","tareaseleccionada","state","dispatch","obtenerTareas","type","payload","agregarTarea","tarea","validarTarea","eliminarTarea","cambiarEstadoTarea","guardarTareaActual","actualizarTarea","limpiarTarea","children"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,UAAhB,QAAkC,OAAlC;AACA,OAAOC,YAAP,MAAyB,gBAAzB;AACA,OAAOC,YAAP,MAAyB,gBAAzB;AAEA,SACIC,eADJ,EAEIC,cAFJ,EAGIC,aAHJ,EAIIC,cAJJ,EAKIC,YALJ,EAMIC,YANJ,EAOIC,eAPJ,EAQIC,aARJ,QASO,aATP;;AAYA,MAAMC,UAAU,GAAGC,KAAK,IAAI;AACxB,QAAMC,YAAY,GAAG;AACjBC,IAAAA,MAAM,EAAE,CACJ;AAAEC,MAAAA,EAAE,EAAE,CAAN;AAASC,MAAAA,MAAM,EAAE,qBAAjB;AAAwCC,MAAAA,MAAM,EAAE,IAAhD;AAAsDC,MAAAA,UAAU,EAAE;AAAlE,KADI,EAEJ;AAAEH,MAAAA,EAAE,EAAE,CAAN;AAASC,MAAAA,MAAM,EAAE,oBAAjB;AAAuCC,MAAAA,MAAM,EAAE,KAA/C;AAAsDC,MAAAA,UAAU,EAAE;AAAlE,KAFI,EAGJ;AAAEH,MAAAA,EAAE,EAAE,CAAN;AAASC,MAAAA,MAAM,EAAE,QAAjB;AAA2BC,MAAAA,MAAM,EAAE,KAAnC;AAA0CC,MAAAA,UAAU,EAAE;AAAtD,KAHI,EAIJ;AAAEH,MAAAA,EAAE,EAAE,CAAN;AAASC,MAAAA,MAAM,EAAE,SAAjB;AAA4BC,MAAAA,MAAM,EAAE,IAApC;AAA0CC,MAAAA,UAAU,EAAE;AAAtD,KAJI,EAKJ;AAAEH,MAAAA,EAAE,EAAE,CAAN;AAASC,MAAAA,MAAM,EAAE,oBAAjB;AAAuCC,MAAAA,MAAM,EAAE,IAA/C;AAAqDC,MAAAA,UAAU,EAAE;AAAjE,KALI,EAMJ;AAAEH,MAAAA,EAAE,EAAE,CAAN;AAASC,MAAAA,MAAM,EAAE,SAAjB;AAA4BC,MAAAA,MAAM,EAAE,KAApC;AAA2CC,MAAAA,UAAU,EAAE;AAAvD,KANI,EAOJ;AAAEH,MAAAA,EAAE,EAAE,CAAN;AAASC,MAAAA,MAAM,EAAE,QAAjB;AAA2BC,MAAAA,MAAM,EAAE,KAAnC;AAA0CC,MAAAA,UAAU,EAAE;AAAtD,KAPI,EAQJ;AAAEH,MAAAA,EAAE,EAAE,CAAN;AAASC,MAAAA,MAAM,EAAE,qBAAjB;AAAwCC,MAAAA,MAAM,EAAE,IAAhD;AAAsDC,MAAAA,UAAU,EAAE;AAAlE,KARI,CADS;AAWjB;AACA;AACA;AACAC,IAAAA,cAAc,EAAE,IAdC;AAejB;AACAC,IAAAA,UAAU,EAAE,KAhBK;AAiBjB;AACAC,IAAAA,iBAAiB,EAAE;AAlBF,GAArB,CADwB,CAsBxB;;AACA,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBvB,UAAU,CAACE,YAAD,EAAeW,YAAf,CAApC,CAvBwB,CA0BxB;AAEA;AACA;;AACA,QAAMW,aAAa,GAAGN,UAAU,IAAI;AAChC;AACA;AACA;AACAK,IAAAA,QAAQ,CAAC;AACLE,MAAAA,IAAI,EAAEtB,eADD;AAELuB,MAAAA,OAAO,EAAER;AAFJ,KAAD,CAAR;AAIH,GARD,CA9BwB,CAwCxB;;;AACA,QAAMS,YAAY,GAAGC,KAAK,IAAI;AAC1BL,IAAAA,QAAQ,CAAC;AACLE,MAAAA,IAAI,EAAErB,cADD;AAELsB,MAAAA,OAAO,EAAEE;AAFJ,KAAD,CAAR;AAIH,GALD,CAzCwB,CAgDxB;;;AACA,QAAMC,YAAY,GAAG,MAAM;AACvBN,IAAAA,QAAQ,CAAC;AACLE,MAAAA,IAAI,EAAEpB,aADD,CAEL;;AAFK,KAAD,CAAR;AAIH,GALD,CAjDwB,CAwDxB;;;AACA,QAAMyB,aAAa,GAAGf,EAAE,IAAI;AACxBQ,IAAAA,QAAQ,CAAC;AACLE,MAAAA,IAAI,EAAEnB,cADD;AAELoB,MAAAA,OAAO,EAAEX;AAFJ,KAAD,CAAR;AAIH,GALD,CAzDwB,CAgExB;;;AACA,QAAMgB,kBAAkB,GAAGH,KAAK,IAAI;AAChCL,IAAAA,QAAQ,CAAC;AACLE,MAAAA,IAAI,EAAElB,YADD;AAELmB,MAAAA,OAAO,EAAEE;AAFJ,KAAD,CAAR;AAIH,GALD,CAjEwB,CAwExB;;;AACA,QAAMI,kBAAkB,GAAGJ,KAAK,IAAI;AAChCL,IAAAA,QAAQ,CAAC;AACLE,MAAAA,IAAI,EAAEjB,YADD;AAELkB,MAAAA,OAAO,EAAEE;AAFJ,KAAD,CAAR;AAIH,GALD,CAzEwB,CAgFxB;;;AACA,QAAMK,eAAe,GAAGL,KAAK,IAAI;AAC7BL,IAAAA,QAAQ,CAAC;AACLE,MAAAA,IAAI,EAAEhB,eADD;AAELiB,MAAAA,OAAO,EAAEE;AAFJ,KAAD,CAAR;AAIH,GALD,CAjFwB,CAwFxB;;;AACA,QAAMM,YAAY,GAAG,MAAM;AACvBX,IAAAA,QAAQ,CAAC;AACLE,MAAAA,IAAI,EAAEf;AADD,KAAD,CAAR;AAGH,GAJD;;AAOA;AAAA;AACI;AACA,wBAAC,YAAD,CAAc,QAAd;AACI,MAAA,KAAK,EAAI;AACLI,QAAAA,MAAM,EAAEQ,KAAK,CAACR,MADT;AAELK,QAAAA,cAAc,EAAGG,KAAK,CAACH,cAFlB;AAGLC,QAAAA,UAAU,EAAEE,KAAK,CAACF,UAHb;AAILC,QAAAA,iBAAiB,EAAEC,KAAK,CAACD,iBAJpB;AAKLG,QAAAA,aALK;AAMLG,QAAAA,YANK;AAOLE,QAAAA,YAPK;AAQLC,QAAAA,aARK;AASLC,QAAAA,kBATK;AAULC,QAAAA,kBAVK;AAWLC,QAAAA,eAXK;AAYLC,QAAAA;AAZK,OADb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAgBKtB,KAAK,CAACuB,QAhBX;AAFJ;AAqBH,CArHD;;AAuHA,eAAexB,UAAf","sourcesContent":["import React, { useReducer } from 'react';\r\nimport TareaContext from './tareaContext';\r\nimport TareaReducer from './tareaReducer';\r\n\r\nimport { \r\n    TAREAS_PROYECTO,\r\n    AGREAGAR_TAREA,\r\n    VALIDAR_TAREA,\r\n    ELIMINAR_TAREA,\r\n    ESTADO_TAREA,\r\n    TAREA_ACTUAL,\r\n    ACTUALIAR_TAREA,\r\n    LIMPIAR_TAREA\r\n} from '../../types';\r\n\r\n\r\nconst TareaState = props => {\r\n    const initialState = {\r\n        tareas: [\r\n            { id: 1, nombre: 'Trabajo en Caliente', estado: true, proyectoId: 1},\r\n            { id: 2, nombre: 'Trabajo en Alturas', estado: false, proyectoId: 2},\r\n            { id: 3, nombre: 'Izajes', estado: false, proyectoId: 3},\r\n            { id: 4, nombre: 'Bloqueo', estado: true, proyectoId: 4},\r\n            { id: 5, nombre: 'Trabajo en Alturas', estado: true, proyectoId: 2},\r\n            { id: 6, nombre: 'Bloqueo', estado: false, proyectoId: 4},\r\n            { id: 7, nombre: 'Izajes', estado: false, proyectoId: 3},\r\n            { id: 8, nombre: 'Trabajo en Caliente', estado: true, proyectoId: 1}\r\n        ],\r\n        //crearemos un state para tareas proyecto\r\n        //esto es para que en el inicio no halla ninguna tarea seleccionada\r\n        //tiene que seleccionar alguna tarea\r\n        tareasproyecto: null,\r\n        //errortarea si el usuario comete un error pasa a true\r\n        errortarea: false,\r\n        //la primera vez que carge nuestra aplicacion no tendra ninguna tarea seleccionada\r\n        tareaseleccionada: null\r\n    }\r\n\r\n    //crear dispatch y state\r\n    const [state, dispatch] = useReducer(TareaReducer, initialState);\r\n\r\n\r\n    //Crear las funciones\r\n\r\n    //1. Obtener las tareas de un proyecto\r\n    //esta funcion la vamos a utilizar en proyecto de Proyecto.js\r\n    const obtenerTareas = proyectoId => {\r\n        //la funcion obtener tareas se va a ejecutar cuando el usuario seleccione un proyecto\r\n        //en Proyecto.js onClick\r\n        //para eso hay que crear el reducer\r\n        dispatch({\r\n            type: TAREAS_PROYECTO,\r\n            payload: proyectoId\r\n        })\r\n    }\r\n\r\n    //2. Agregar una tareas al proyecto seleccionado\r\n    const agregarTarea = tarea => {\r\n        dispatch({\r\n            type: AGREAGAR_TAREA,\r\n            payload: tarea\r\n        })\r\n    }\r\n\r\n    //Valida y muestra un error en caso de que sea necesario\r\n    const validarTarea = () => {\r\n        dispatch({\r\n            type: VALIDAR_TAREA,\r\n            //no va tomar ningun payload\r\n        })\r\n    }\r\n\r\n    //Eliminar tarea por id\r\n    const eliminarTarea = id => {\r\n        dispatch({\r\n            type: ELIMINAR_TAREA,\r\n            payload: id\r\n        })\r\n    }\r\n\r\n    //Cambia el estado de cada tarea\r\n    const cambiarEstadoTarea = tarea => {\r\n        dispatch({\r\n            type: ESTADO_TAREA,\r\n            payload: tarea\r\n        })\r\n    }\r\n\r\n    //Extrae una tare para edicion\r\n    const guardarTareaActual = tarea => {   \r\n        dispatch({\r\n            type: TAREA_ACTUAL,\r\n            payload: tarea\r\n        })\r\n    }\r\n    \r\n    //Edita o modifica una tarea\r\n    const actualizarTarea = tarea => {\r\n        dispatch({\r\n            type: ACTUALIAR_TAREA,\r\n            payload: tarea\r\n        })\r\n    }\r\n\r\n    //Elimina la tarea seleccionada\r\n    const limpiarTarea = () => {\r\n        dispatch({\r\n            type: LIMPIAR_TAREA\r\n        })\r\n    }\r\n\r\n\r\n    return (\r\n        //vamos a pasar las tareas al Provider\r\n        <TareaContext.Provider\r\n            value = {{\r\n                tareas: state.tareas,\r\n                tareasproyecto : state.tareasproyecto,\r\n                errortarea: state.errortarea,\r\n                tareaseleccionada: state.tareaseleccionada,\r\n                obtenerTareas,\r\n                agregarTarea,\r\n                validarTarea,\r\n                eliminarTarea,\r\n                cambiarEstadoTarea,\r\n                guardarTareaActual,\r\n                actualizarTarea,\r\n                limpiarTarea\r\n            }}\r\n        >\r\n            {props.children}\r\n        </TareaContext.Provider>  \r\n    )\r\n}\r\n\r\nexport default TareaState;"]},"metadata":{},"sourceType":"module"}