{"ast":null,"code":"var _jsxFileName = \"D:\\\\Scripts\\\\React103\\\\cliente\\\\src\\\\context\\\\tareas\\\\tareaState.js\";\nimport React, { useReducer } from 'react';\nimport TareaContext from './tareaContext';\nimport TareaReducer from './tareaReducer';\nimport { TAREAS_PROYECTO, AGREAGAR_TAREA, VALIDAR_TAREA, ELIMINAR_TAREA //ESTADO_TAREA,\n, TAREA_ACTUAL, ACTUALIAR_TAREA, LIMPIAR_TAREA } from '../../types';\nimport clienteAxios from '../../config/axios';\n\nconst TareaState = props => {\n  const initialState = {\n    /*\n    tareas: [\n        { id: 1, nombre: 'Trabajo en Caliente', estado: true, proyectoId: 1},\n        { id: 2, nombre: 'Trabajo en Alturas', estado: false, proyectoId: 2},\n        { id: 3, nombre: 'Izajes', estado: false, proyectoId: 3},\n        { id: 4, nombre: 'Bloqueo', estado: true, proyectoId: 4},\n        { id: 5, nombre: 'Trabajo en Alturas', estado: true, proyectoId: 2},\n        { id: 6, nombre: 'Bloqueo', estado: false, proyectoId: 4},\n        { id: 7, nombre: 'Izajes', estado: false, proyectoId: 3},\n        { id: 8, nombre: 'Trabajo en Caliente', estado: true, proyectoId: 1}\n    ],\n    */\n    //crearemos un state para tareas proyecto\n    //esto es para que en el inicio no halla ninguna tarea seleccionada\n    //tiene que seleccionar alguna tarea\n    tareasproyecto: [],\n    //errortarea si el usuario comete un error pasa a true\n    errortarea: false,\n    //la primera vez que carge nuestra aplicacion no tendra ninguna tarea seleccionada\n    tareaseleccionada: null\n  }; //crear dispatch y state\n\n  const [state, dispatch] = useReducer(TareaReducer, initialState); //Crear las funciones\n  //1. Obtener las tareas de un proyecto\n  //esta funcion la vamos a utilizar en proyecto de Proyecto.js\n\n  const obtenerTareas = async proyecto => {\n    //la funcion obtener tareas se va a ejecutar cuando el usuario seleccione un proyecto\n    //en Proyecto.js onClick\n    //para eso hay que crear el reducer\n    console.log(proyecto);\n\n    try {\n      const resultado = await clienteAxios.get('/api/tareas', {\n        params: {\n          proyecto\n        }\n      });\n      console.log(resultado);\n      dispatch({\n        type: TAREAS_PROYECTO,\n        payload: resultado.data.tareas\n      });\n    } catch (error) {\n      console.log(error);\n    }\n  }; //2. Agregar una tareas al proyecto seleccionado\n\n\n  const agregarTarea = async tarea => {\n    try {\n      const resultado = await clienteAxios.post('/api/tareas', tarea);\n      console.log(resultado);\n      dispatch({\n        type: AGREAGAR_TAREA,\n        payload: tarea\n      });\n    } catch (error) {\n      console.log(error);\n    }\n  }; //Valida y muestra un error en caso de que sea necesario\n\n\n  const validarTarea = () => {\n    dispatch({\n      type: VALIDAR_TAREA //no va tomar ningun payload\n\n    });\n  }; //Eliminar tarea por id\n\n\n  const eliminarTarea = async (id, proyecto) => {\n    try {\n      await clienteAxios.delete(`/api/tareas/${id}`, {\n        params: {\n          proyecto\n        }\n      });\n      dispatch({\n        type: ELIMINAR_TAREA,\n        payload: id\n      });\n    } catch (error) {\n      console.log(error);\n    }\n  }; //Edita o modifica una tarea\n\n\n  const actualizarTarea = async tarea => {\n    console.log(tarea);\n\n    try {\n      const resultado = await clienteAxios.put(`/api/tareas/${tarea._id}`, tarea);\n      console.log(resultado);\n      dispatch({\n        type: ACTUALIAR_TAREA,\n        payload: resultado.data.tarea\n      });\n    } catch (error) {\n      console.log(error);\n    }\n  }; //Cambia el estado de cada tarea\n\n  /*\n  const cambiarEstadoTarea = tarea => {\n      dispatch({\n          type: ESTADO_TAREA,\n          payload: tarea\n      })\n  }\n  */\n  //Extrae una tarea para edicion\n\n\n  const guardarTareaActual = tarea => {\n    dispatch({\n      type: TAREA_ACTUAL,\n      payload: tarea\n    });\n  }; //Elimina la tarea seleccionada\n\n\n  const limpiarTarea = () => {\n    dispatch({\n      type: LIMPIAR_TAREA\n    });\n  };\n\n  return (\n    /*#__PURE__*/\n    //vamos a pasar las tareas al Provider\n    React.createElement(TareaContext.Provider, {\n      value: {\n        //tareas: state.tareas,\n        tareasproyecto: state.tareasproyecto,\n        errortarea: state.errortarea,\n        tareaseleccionada: state.tareaseleccionada,\n        obtenerTareas,\n        agregarTarea,\n        validarTarea,\n        eliminarTarea,\n        //cambiarEstadoTarea,\n        guardarTareaActual,\n        actualizarTarea,\n        limpiarTarea\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 153,\n        columnNumber: 9\n      }\n    }, props.children)\n  );\n};\n\nexport default TareaState;","map":{"version":3,"sources":["D:/Scripts/React103/cliente/src/context/tareas/tareaState.js"],"names":["React","useReducer","TareaContext","TareaReducer","TAREAS_PROYECTO","AGREAGAR_TAREA","VALIDAR_TAREA","ELIMINAR_TAREA","TAREA_ACTUAL","ACTUALIAR_TAREA","LIMPIAR_TAREA","clienteAxios","TareaState","props","initialState","tareasproyecto","errortarea","tareaseleccionada","state","dispatch","obtenerTareas","proyecto","console","log","resultado","get","params","type","payload","data","tareas","error","agregarTarea","tarea","post","validarTarea","eliminarTarea","id","delete","actualizarTarea","put","_id","guardarTareaActual","limpiarTarea","children"],"mappings":"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","sourcesContent":["import React, { useReducer } from 'react';\nimport TareaContext from './tareaContext';\nimport TareaReducer from './tareaReducer';\n\nimport { \n    TAREAS_PROYECTO,\n    AGREAGAR_TAREA,\n    VALIDAR_TAREA,\n    ELIMINAR_TAREA,\n    //ESTADO_TAREA,\n    TAREA_ACTUAL,\n    ACTUALIAR_TAREA,\n    LIMPIAR_TAREA\n} from '../../types';\n\nimport clienteAxios from '../../config/axios';\n\n\nconst TareaState = props => {\n    const initialState = {\n        /*\n        tareas: [\n            { id: 1, nombre: 'Trabajo en Caliente', estado: true, proyectoId: 1},\n            { id: 2, nombre: 'Trabajo en Alturas', estado: false, proyectoId: 2},\n            { id: 3, nombre: 'Izajes', estado: false, proyectoId: 3},\n            { id: 4, nombre: 'Bloqueo', estado: true, proyectoId: 4},\n            { id: 5, nombre: 'Trabajo en Alturas', estado: true, proyectoId: 2},\n            { id: 6, nombre: 'Bloqueo', estado: false, proyectoId: 4},\n            { id: 7, nombre: 'Izajes', estado: false, proyectoId: 3},\n            { id: 8, nombre: 'Trabajo en Caliente', estado: true, proyectoId: 1}\n        ],\n        */\n        //crearemos un state para tareas proyecto\n        //esto es para que en el inicio no halla ninguna tarea seleccionada\n        //tiene que seleccionar alguna tarea\n        tareasproyecto: [],\n        //errortarea si el usuario comete un error pasa a true\n        errortarea: false,\n        //la primera vez que carge nuestra aplicacion no tendra ninguna tarea seleccionada\n        tareaseleccionada: null\n    }\n\n    //crear dispatch y state\n    const [state, dispatch] = useReducer(TareaReducer, initialState);\n\n\n    //Crear las funciones\n\n    //1. Obtener las tareas de un proyecto\n    //esta funcion la vamos a utilizar en proyecto de Proyecto.js\n    const obtenerTareas = async proyecto => {\n        //la funcion obtener tareas se va a ejecutar cuando el usuario seleccione un proyecto\n        //en Proyecto.js onClick\n        //para eso hay que crear el reducer\n        console.log(proyecto);\n        try {\n            const resultado = await clienteAxios.get('/api/tareas', { params: { proyecto }});\n            console.log(resultado);\n\n            dispatch({\n                type: TAREAS_PROYECTO,\n                payload: resultado.data.tareas\n            })\n\n        } catch (error) {\n            console.log(error);\n        }\n        \n    }\n\n    //2. Agregar una tareas al proyecto seleccionado\n    const agregarTarea = async tarea => {\n        try {\n            const resultado = await clienteAxios.post('/api/tareas', tarea);\n            console.log(resultado);\n            \n            dispatch({\n                type: AGREAGAR_TAREA,\n                payload: tarea\n            })\n        } catch (error) {\n            console.log(error);\n        }\n        \n    }\n\n    //Valida y muestra un error en caso de que sea necesario\n    const validarTarea = () => {\n        dispatch({\n            type: VALIDAR_TAREA,\n            //no va tomar ningun payload\n        })\n    }\n\n    //Eliminar tarea por id\n    const eliminarTarea = async (id, proyecto) => {\n        try {\n            await clienteAxios.delete(`/api/tareas/${id}`, { params: { proyecto }});\n            dispatch({\n                type: ELIMINAR_TAREA,\n                payload: id\n            })\n        } catch (error) {\n            console.log(error);\n        }\n    }\n\n     //Edita o modifica una tarea\n     const actualizarTarea = async tarea => {\n        console.log(tarea);\n        try {\n            const resultado = await clienteAxios.put(`/api/tareas/${tarea._id}`, tarea);\n            console.log(resultado);\n\n            dispatch({\n                type: ACTUALIAR_TAREA,\n                payload: resultado.data.tarea\n            })\n        } catch (error) {\n            console.log(error);\n        }\n    }\n    //Cambia el estado de cada tarea\n    /*\n    const cambiarEstadoTarea = tarea => {\n        dispatch({\n            type: ESTADO_TAREA,\n            payload: tarea\n        })\n    }\n    */\n\n    //Extrae una tarea para edicion\n    const guardarTareaActual = tarea => {   \n        dispatch({\n            type: TAREA_ACTUAL,\n            payload: tarea\n        })\n    }\n    \n   \n\n    //Elimina la tarea seleccionada\n    const limpiarTarea = () => {\n        dispatch({\n            type: LIMPIAR_TAREA\n        })\n    }\n\n\n    return (\n        //vamos a pasar las tareas al Provider\n        <TareaContext.Provider\n            value = {{\n                //tareas: state.tareas,\n                tareasproyecto : state.tareasproyecto,\n                errortarea: state.errortarea,\n                tareaseleccionada: state.tareaseleccionada,\n                obtenerTareas,\n                agregarTarea,\n                validarTarea,\n                eliminarTarea,\n                //cambiarEstadoTarea,\n                guardarTareaActual,\n                actualizarTarea,\n                limpiarTarea\n            }}\n        >\n            {props.children}\n        </TareaContext.Provider>  \n    )\n}\n\nexport default TareaState;"]},"metadata":{},"sourceType":"module"}