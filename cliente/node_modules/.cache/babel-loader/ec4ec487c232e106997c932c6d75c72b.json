{"ast":null,"code":"var _jsxFileName = \"D:\\\\Scripts\\\\React103\\\\cliente\\\\src\\\\components\\\\proyectos\\\\NuevoProyecto.js\";\nimport React, { Fragment, useState, useContext } from 'react';\nimport proyectoContext from '../../context/proyectos/proyectoContext'; //import { makeStyles } from '@material-ui/core';\n//import Contenedor from '../layout/Contenedor';\n\nconst NuevoProyecto = () => {\n  //Obtener el state del formulario sin props con useContext\n  const proyectosContext = useContext(proyectoContext); //aca vemos el state, inicalmente en false, formulario fue creado en proyectoState.js\n  //aca tambien se extraen las funciones\n  //se recomienda extraer primero los staes y luego las funciones\n\n  const {\n    formulario,\n    errorformulario,\n    mostrarFormulario,\n    agregarProyecto,\n    mostrarError\n  } = proyectosContext; //State para Tareas\n\n  const [proyecto, guardarProyecto] = useState({\n    nombre: ''\n  }); //Extraer nombre de tarea\n\n  const {\n    nombre\n  } = proyecto; //Lee los contenidos del input\n\n  const onChangeProyecto = e => {\n    guardarProyecto({ ...proyecto,\n      [e.target.name]: e.target.value\n    });\n  }; //Cuando el usuario envía un proyecto o cuando el usuario hace submit\n\n\n  const onSubmitProyecto = e => {\n    e.preventDefault(); //Validar el proyecto\n    //pasamos la funcion mostrarError()\n\n    /*esa funcion, va ir a state -> proyecto.State.js,\n    identifica a VALIDAR_FORMULARIO, luego se va al reducer protectoReducer.js\n    identifica VALIDAR_FORMULARIO y cambia el error como true\n    al cambiar a true, se va al ternario creado en Fragment\n    {errorformulario ? <p className=\"mensaje error\">El nombre del ../>p> : null }\n    -> se evalua como verdadera si el campo esta vacio -> errorformulario ? -> muestra el mensaje  \n    */\n\n    if (nombre === '') {\n      mostrarError();\n      return;\n    } //Agregar al state\n\n\n    agregarProyecto(proyecto); //Reiniciar el form, nombre queda como string vacio\n\n    guardarProyecto({\n      nombre: ''\n    });\n  }; //Mostrar el formulario\n\n\n  const onClickFormulario = () => {\n    mostrarFormulario();\n  };\n  /*\n  const estilos = makeStyles(theme => ({\n      offset: theme.mixins.toolbar,\n      root: {\n          fontSize: 28,\n      },\n      text: {\n          fontSize: 28,\n      },\n  }));\n   const classes = estilos();\n  */\n\n\n  return /*#__PURE__*/React.createElement(Fragment, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"button\", {\n    type: \"button\",\n    className: \"btn btn-block btn-primario\" //aca mostramos el formulario al hacer click\n    //{ formulario  ? } -> si formulario existe ->\n    ,\n    onClick: onClickFormulario,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 13\n    }\n  }, \"Agregar Nueva Postura\"), formulario ? /*#__PURE__*/React.createElement(\"form\", {\n    className: \"formulario-nuevo-proyecto\",\n    onSubmit: onSubmitProyecto,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 25\n    }\n  }, /*#__PURE__*/React.createElement(\"input\", {\n    type: \"text\",\n    className: \"input-text\",\n    placeholder: \"Nombre de la Tarea\",\n    name: \"nombre\" //value={nombre}\n    ,\n    onChange: onChangeProyecto,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 29\n    }\n  }), /*#__PURE__*/React.createElement(\"input\", {\n    type: \"submit\",\n    className: \"btn btn-primario btn-block\",\n    value: \"Agregar Tarea\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 29\n    }\n  })) : null, errorformulario ? /*#__PURE__*/React.createElement(\"p\", {\n    className: \"mensaje error\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 17\n    }\n  }, \"El nombre de la Tarea es obligatoria\") : null);\n};\n\nexport default NuevoProyecto;","map":{"version":3,"sources":["D:/Scripts/React103/cliente/src/components/proyectos/NuevoProyecto.js"],"names":["React","Fragment","useState","useContext","proyectoContext","NuevoProyecto","proyectosContext","formulario","errorformulario","mostrarFormulario","agregarProyecto","mostrarError","proyecto","guardarProyecto","nombre","onChangeProyecto","e","target","name","value","onSubmitProyecto","preventDefault","onClickFormulario"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,QAA1B,EAAoCC,UAApC,QAAsD,OAAtD;AACA,OAAOC,eAAP,MAA4B,yCAA5B,C,CACA;AACA;;AAGA,MAAMC,aAAa,GAAG,MAAM;AAExB;AACA,QAAMC,gBAAgB,GAAGH,UAAU,CAACC,eAAD,CAAnC,CAHwB,CAIxB;AACA;AACA;;AACA,QAAM;AAAEG,IAAAA,UAAF;AAAcC,IAAAA,eAAd;AAA+BC,IAAAA,iBAA/B;AAAkDC,IAAAA,eAAlD;AAAmEC,IAAAA;AAAnE,MAAoFL,gBAA1F,CAPwB,CASxB;;AACA,QAAM,CAACM,QAAD,EAAWC,eAAX,IAA+BX,QAAQ,CAAC;AAC1CY,IAAAA,MAAM,EAAE;AADkC,GAAD,CAA7C,CAVwB,CAcxB;;AACA,QAAM;AAAEA,IAAAA;AAAF,MAAaF,QAAnB,CAfwB,CAiBxB;;AACA,QAAMG,gBAAgB,GAAGC,CAAC,IAAI;AAC1BH,IAAAA,eAAe,CAAC,EACZ,GAAGD,QADS;AAEZ,OAACI,CAAC,CAACC,MAAF,CAASC,IAAV,GAAkBF,CAAC,CAACC,MAAF,CAASE;AAFf,KAAD,CAAf;AAIH,GALD,CAlBwB,CAyBxB;;;AACA,QAAMC,gBAAgB,GAAGJ,CAAC,IAAI;AAC1BA,IAAAA,CAAC,CAACK,cAAF,GAD0B,CAG1B;AACA;;AACA;;;;;;;;AAOA,QAAGP,MAAM,KAAK,EAAd,EAAkB;AACdH,MAAAA,YAAY;AACZ;AACH,KAfyB,CAgB1B;;;AACAD,IAAAA,eAAe,CAACE,QAAD,CAAf,CAjB0B,CAmB1B;;AACAC,IAAAA,eAAe,CAAC;AACZC,MAAAA,MAAM,EAAE;AADI,KAAD,CAAf;AAGH,GAvBD,CA1BwB,CAmDxB;;;AACA,QAAMQ,iBAAiB,GAAG,MAAM;AAC5Bb,IAAAA,iBAAiB;AACpB,GAFD;AAKA;;;;;;;;;;;;;;AAaA,sBAEI,oBAAC,QAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAEI;AACI,IAAA,IAAI,EAAC,QADT;AAEI,IAAA,SAAS,EAAC,4BAFd,CAGI;AAEA;AALJ;AAMI,IAAA,OAAO,EAAGa,iBANd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6BAFJ,EAWMf,UAAU,gBAEA;AACI,IAAA,SAAS,EAAC,2BADd;AAEI,IAAA,QAAQ,EAAEa,gBAFd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAII;AACI,IAAA,IAAI,EAAC,MADT;AAEI,IAAA,SAAS,EAAC,YAFd;AAGI,IAAA,WAAW,EAAC,oBAHhB;AAII,IAAA,IAAI,EAAC,QAJT,CAKI;AALJ;AAMI,IAAA,QAAQ,EAAEL,gBANd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAJJ,eAaI;AACI,IAAA,IAAI,EAAC,QADT;AAEI,IAAA,SAAS,EAAC,4BAFd;AAGI,IAAA,KAAK,EAAC,eAHV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAbJ,CAFA,GAsBA,IAjChB,EAkCOP,eAAe,gBACd;AAAG,IAAA,SAAS,EAAC,eAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,4CADc,GAGZ,IArCV,CAFJ;AA2CH,CAjHD;;AAmHA,eAAeH,aAAf","sourcesContent":["import React, { Fragment, useState, useContext } from 'react';\nimport proyectoContext from '../../context/proyectos/proyectoContext';\n//import { makeStyles } from '@material-ui/core';\n//import Contenedor from '../layout/Contenedor';\n\n\nconst NuevoProyecto = () => {\n\n    //Obtener el state del formulario sin props con useContext\n    const proyectosContext = useContext(proyectoContext);\n    //aca vemos el state, inicalmente en false, formulario fue creado en proyectoState.js\n    //aca tambien se extraen las funciones\n    //se recomienda extraer primero los staes y luego las funciones\n    const { formulario, errorformulario, mostrarFormulario, agregarProyecto, mostrarError } = proyectosContext;\n\n    //State para Tareas\n    const [proyecto, guardarProyecto ] = useState({\n        nombre: ''\n    });\n\n    //Extraer nombre de tarea\n    const { nombre } = proyecto;\n\n    //Lee los contenidos del input\n    const onChangeProyecto = e => {\n        guardarProyecto({\n            ...proyecto,\n            [e.target.name] : e.target.value\n        })\n    }\n\n    //Cuando el usuario envía un proyecto o cuando el usuario hace submit\n    const onSubmitProyecto = e => {\n        e.preventDefault();\n\n        //Validar el proyecto\n        //pasamos la funcion mostrarError()\n        /*esa funcion, va ir a state -> proyecto.State.js,\n        identifica a VALIDAR_FORMULARIO, luego se va al reducer protectoReducer.js\n        identifica VALIDAR_FORMULARIO y cambia el error como true\n        al cambiar a true, se va al ternario creado en Fragment\n        {errorformulario ? <p className=\"mensaje error\">El nombre del ../>p> : null }\n        -> se evalua como verdadera si el campo esta vacio -> errorformulario ? -> muestra el mensaje  \n        */\n        if(nombre === '') {\n            mostrarError();\n            return;\n        }\n        //Agregar al state\n        agregarProyecto(proyecto)\n        \n        //Reiniciar el form, nombre queda como string vacio\n        guardarProyecto({\n            nombre: ''\n        })\n    }\n\n    //Mostrar el formulario\n    const onClickFormulario = () => {\n        mostrarFormulario();\n    }\n    \n\n    /*\n    const estilos = makeStyles(theme => ({\n        offset: theme.mixins.toolbar,\n        root: {\n            fontSize: 28,\n        },\n        text: {\n            fontSize: 28,\n        },\n    }));\n\n    const classes = estilos();\n    */\n    return(\n        \n        <Fragment>\n           \n            <button\n                type=\"button\"\n                className=\"btn btn-block btn-primario\"\n                //aca mostramos el formulario al hacer click\n\n                //{ formulario  ? } -> si formulario existe ->\n                onClick={ onClickFormulario }\n            >Agregar Nueva Postura</button>\n            \n            { formulario ?\n                    (\n                        <form\n                            className=\"formulario-nuevo-proyecto\"\n                            onSubmit={onSubmitProyecto}\n                        >\n                            <input \n                                type=\"text\"\n                                className=\"input-text\"\n                                placeholder=\"Nombre de la Tarea\"\n                                name=\"nombre\"\n                                //value={nombre}\n                                onChange={onChangeProyecto}\n                            />\n\n                            <input\n                                type=\"submit\"\n                                className=\"btn btn-primario btn-block\"\n                                value=\"Agregar Tarea\"\n                            />\n\n                        </form>\n                    ) : null } \n             { errorformulario ? \n                <p className=\"mensaje error\">El nombre de la Tarea es obligatoria</p>\n\n                : null}        \n        </Fragment>\n    );\n\n}\n\nexport default NuevoProyecto;"]},"metadata":{},"sourceType":"module"}