{"ast":null,"code":"var _jsxFileName = \"D:\\\\Scripts\\\\React103\\\\cliente\\\\src\\\\context\\\\autentificacion\\\\authState.js\";\nimport React, { useReducer } from 'react';\nimport AuthContext from './authContext';\nimport AuthReducer from './authReducer';\nimport clienteAxios from '../../config/axios';\nimport tokenAuth from '../../config/tokenAuth';\nimport { REGISTRO_EXITOSO, REGISTRO_ERROR, OBTENER_USUARIO, LOGIN_EXITOSO, LOGIN_ERROR, CERRAR_SESION } from '../../types';\n\nconst AuthState = props => {\n  //state inicial\n  const initialState = {\n    //este token se almacenará en localstorage\n    token: localStorage.getItem('token'),\n    autenticado: null,\n    usuario: null,\n    mensaje: null,\n    cargando: true\n  };\n  const [state, dispatch] = useReducer(AuthReducer, initialState); //creando las funciones\n  //Registrar usuario\n\n  const registrarUsuario = async datos => {\n    try {\n      const respuesta = await clienteAxios.post('/api/usuarios', datos);\n      console.log(respuesta.data);\n      dispatch({\n        type: REGISTRO_EXITOSO,\n        payload: respuesta.data\n      }); //cuando se registra mandamos a llamar a la funcionusuarioAutenticado();\n      //Obtener el usuario una vez que tenga un registro exitoso\n\n      usuarioAutenticado();\n    } catch (error) {\n      //console.log(error.response.data.msg);\n      //en alertaState toma un msg y una categoria\n      const alerta = {\n        msg: error.response.data.msg,\n        categoria: 'alerta-error'\n      };\n      dispatch({\n        type: REGISTRO_ERROR,\n        payload: alerta\n      });\n    }\n  }; //Retorna e usuario autenticado\n\n\n  const usuarioAutenticado = async () => {\n    //aca vamos a leer el token guardado en localStorage\n    const token = localStorage.getItem('token');\n\n    if (token) {\n      //TODO: funcion para enviar el token por headers\n      tokenAuth(token);\n    }\n\n    try {\n      const respuesta = await clienteAxios.get('/api/auth'); //console.log(respuesta);\n\n      dispatch({\n        type: OBTENER_USUARIO,\n        payload: respuesta.data.usuario\n      });\n    } catch (error) {\n      console.log(error.response);\n      dispatch({\n        type: LOGIN_ERROR\n      });\n    }\n  }; //Cuando el usuario inicia sesión\n\n\n  const iniciarSesion = async datos => {\n    try {\n      const respuesta = await clienteAxios.post('/api/auth', datos);\n      console.log(respuesta);\n      dispatch({\n        //payload respuesta.data pasará el token si el login es exitoso\n        type: LOGIN_EXITOSO,\n        payload: respuesta.data\n      }); //Obtener el usuario\n\n      usuarioAutenticado();\n    } catch (error) {\n      console.log(error.response.data.msg);\n      const alerta = {\n        msg: error.response.data.msg,\n        categoria: 'alerta-error'\n      };\n      dispatch({\n        type: LOGIN_ERROR,\n        payload: alerta\n      });\n    }\n  }; //Cierra la sesión del usuario\n\n\n  const cerrarSesion = () => {\n    dispatch({\n      type: CERRAR_SESION\n    });\n  };\n\n  return /*#__PURE__*/React.createElement(AuthContext.Provider, {\n    value: {\n      token: state.token,\n      autenticado: state.autenticado,\n      usuario: state.usuario,\n      mensaje: state.mensaje,\n      cargando: state.cargando,\n      registrarUsuario,\n      iniciarSesion,\n      usuarioAutenticado,\n      cerrarSesion\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 126,\n      columnNumber: 9\n    }\n  }, props.children);\n};\n\nexport default AuthState;","map":{"version":3,"sources":["D:/Scripts/React103/cliente/src/context/autentificacion/authState.js"],"names":["React","useReducer","AuthContext","AuthReducer","clienteAxios","tokenAuth","REGISTRO_EXITOSO","REGISTRO_ERROR","OBTENER_USUARIO","LOGIN_EXITOSO","LOGIN_ERROR","CERRAR_SESION","AuthState","props","initialState","token","localStorage","getItem","autenticado","usuario","mensaje","cargando","state","dispatch","registrarUsuario","datos","respuesta","post","console","log","data","type","payload","usuarioAutenticado","error","alerta","msg","response","categoria","get","iniciarSesion","cerrarSesion","children"],"mappings":"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","sourcesContent":["import React, { useReducer } from 'react';\nimport AuthContext from './authContext';\nimport AuthReducer from './authReducer';\n\nimport clienteAxios from '../../config/axios';\nimport tokenAuth from '../../config/tokenAuth';\n\nimport { \n    REGISTRO_EXITOSO, \n    REGISTRO_ERROR,\n    OBTENER_USUARIO, \n    LOGIN_EXITOSO, \n    LOGIN_ERROR, \n    CERRAR_SESION \n} from '../../types'; \n\n\n\nconst AuthState = props => {\n    //state inicial\n    const initialState = {\n        //este token se almacenará en localstorage\n        token: localStorage.getItem('token'),\n        autenticado: null,\n        usuario: null,\n        mensaje: null,\n        cargando: true\n    }\n    \n    const [ state, dispatch ] = useReducer(AuthReducer, initialState);\n\n    //creando las funciones\n    \n    //Registrar usuario\n    const registrarUsuario = async datos => {\n        \n        try {\n            const respuesta = await clienteAxios.post('/api/usuarios', datos);\n            console.log(respuesta.data);\n\n            dispatch({\n                type: REGISTRO_EXITOSO,\n                payload: respuesta.data\n            });\n            //cuando se registra mandamos a llamar a la funcionusuarioAutenticado();\n            //Obtener el usuario una vez que tenga un registro exitoso\n            usuarioAutenticado();\n\n        } catch (error) {\n            //console.log(error.response.data.msg);\n            //en alertaState toma un msg y una categoria\n            const alerta = {\n                msg: error.response.data.msg,\n                categoria: 'alerta-error'\n            }\n\n            dispatch({\n                type: REGISTRO_ERROR,\n                payload: alerta\n            })\n        }\n    }\n\n    //Retorna e usuario autenticado\n    const usuarioAutenticado = async () => {\n        //aca vamos a leer el token guardado en localStorage\n        const token = localStorage.getItem('token');\n        if(token) {\n            //TODO: funcion para enviar el token por headers\n            tokenAuth(token);\n        }\n\n        try {\n            const respuesta = await clienteAxios.get('/api/auth');\n            //console.log(respuesta);\n            dispatch({\n                type: OBTENER_USUARIO,\n                payload: respuesta.data.usuario\n            });\n\n        } catch (error) {\n            console.log(error.response);\n            dispatch({\n                type: LOGIN_ERROR\n            })\n        }\n    }\n\n    //Cuando el usuario inicia sesión\n    const iniciarSesion = async datos => {\n        try {\n            const respuesta = await clienteAxios.post('/api/auth', datos);\n            console.log(respuesta);\n\n            dispatch({\n                //payload respuesta.data pasará el token si el login es exitoso\n                type: LOGIN_EXITOSO,\n                payload: respuesta.data\n            });\n\n            //Obtener el usuario\n            usuarioAutenticado();\n\n        } catch (error) {\n            console.log(error.response.data.msg);\n            const alerta = {\n                msg: error.response.data.msg,\n                categoria: 'alerta-error'\n            }\n\n            dispatch({\n                type: LOGIN_ERROR,\n                payload: alerta\n            })\n        }\n    }\n\n    //Cierra la sesión del usuario\n    const cerrarSesion = () => {\n        dispatch({\n            type: CERRAR_SESION\n        })\n    }\n\n    return (\n        <AuthContext.Provider\n            value={{\n                token: state.token,\n                autenticado: state.autenticado,\n                usuario: state.usuario,\n                mensaje: state.mensaje,\n                cargando: state.cargando,\n                registrarUsuario,\n                iniciarSesion,\n                usuarioAutenticado,\n                cerrarSesion\n            }}\n        >{props.children}\n\n        </AuthContext.Provider>\n    )\n}\n\nexport default AuthState;\n"]},"metadata":{},"sourceType":"module"}