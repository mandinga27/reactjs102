{"ast":null,"code":"import { TAREAS_PROYECTO //AGREGAR_PROYECTO,\n, AGREAGAR_TAREA, VALIDAR_TAREA, ELIMINAR_TAREA //ESTADO_TAREA, \n, TAREA_ACTUAL, ACTUALIAR_TAREA, LIMPIAR_TAREA } from '../../types';\nexport default ((state, action) => {\n  switch (action.type) {\n    case TAREAS_PROYECTO:\n      return { ...state,\n        //en tareasproyecto su valor será el state.tareas.filter y cuando la tarea cuyo proyectoId \n        //es igual al del payload es que se van agregar, ej payloadId = 1\n        //tareasproyecto: state.tareasproyecto.filter(tarea => tarea.proyectoId === action.payload)\n        //se comentó filter porque ahora se hace desde la API del backend en tareaController get\n        tareasproyecto: action.payload\n      };\n\n    case AGREAGAR_TAREA:\n      return { ...state,\n        //tareas viene del state principal en TareaState = props...\n        //agregamos el arreglo de tareas que ya tenemos y le \n        //agregamos otra\n        //al cambiar de tareas: [...state.tareas, action.payload],\n        //a tareas: [...action.payload],state.tareas -> agregará las tareas en primer lugar de la lista\n        tareasproyecto: [action.payload, ...state.tareasproyecto],\n        //con errortarea: false se resetea el mensaje de error en caso de activarse\n        errortarea: false\n      };\n\n    case VALIDAR_TAREA:\n      return { ...state,\n        errortarea: true\n      };\n\n    case ELIMINAR_TAREA:\n      return { ...state,\n        tareasproyecto: state.tareasproyecto.filter(tarea => tarea._id !== action.payload)\n      };\n\n    case ACTUALIAR_TAREA:\n      return { ...state,\n        tareasproyecto: state.tareasproyecto.map(tarea => tarea._id === action.payload._id ? action.payload : tarea)\n      };\n\n    /*\n    case ESTADO_TAREA:\n        return {\n            ...state,\n            tareasproyecto: state.tareasproyecto.map(tarea => tarea.id === action.payload.id ? \n            action.payload: tarea )\n        }\n        */\n\n    case TAREA_ACTUAL:\n      return { ...state,\n        tareaseleccionada: action.payload\n      };\n    //en ACTUALIAR_TAREA tareas: tiene la misma funcion que ESTADO_TAREA\n    //-> su puede colocar sobre el case de ESTADO_TAREA\n\n    /*\n    case ACTUALIAR_TAREA:\n     return {\n         ...state,\n         tareas: state.tareas.map(tarea => tarea.id === action.payload.id ? \n         action.payload: tarea )\n     }\n     */\n\n    case LIMPIAR_TAREA:\n      return { ...state,\n        tareaseleccionada: null\n      };\n\n    default:\n      return state;\n  }\n});","map":{"version":3,"sources":["D:/Scripts/React103/cliente/src/context/tareas/tareaReducer.js"],"names":["TAREAS_PROYECTO","AGREAGAR_TAREA","VALIDAR_TAREA","ELIMINAR_TAREA","TAREA_ACTUAL","ACTUALIAR_TAREA","LIMPIAR_TAREA","state","action","type","tareasproyecto","payload","errortarea","filter","tarea","_id","map","tareaseleccionada"],"mappings":"AAAA,SACIA,eADJ,CAEI;AAFJ,EAGIC,cAHJ,EAIIC,aAJJ,EAKIC,cALJ,CAMI;AANJ,EAOIC,YAPJ,EAQIC,eARJ,EASIC,aATJ,QAUO,aAVP;AAcA,gBAAe,CAACC,KAAD,EAAQC,MAAR,KAAmB;AAC9B,UAAOA,MAAM,CAACC,IAAd;AACI,SAAKT,eAAL;AACI,aAAO,EACH,GAAGO,KADA;AAEH;AACA;AACA;AACA;AACAG,QAAAA,cAAc,EAAEF,MAAM,CAACG;AANpB,OAAP;;AASJ,SAAKV,cAAL;AACI,aAAO,EACH,GAAGM,KADA;AAEH;AACA;AACA;AACA;AACA;AACAG,QAAAA,cAAc,EAAE,CAACF,MAAM,CAACG,OAAR,EAAiB,GAAGJ,KAAK,CAACG,cAA1B,CAPb;AAQH;AACAE,QAAAA,UAAU,EAAE;AATT,OAAP;;AAWJ,SAAKV,aAAL;AACI,aAAO,EACH,GAAGK,KADA;AAEHK,QAAAA,UAAU,EAAE;AAFT,OAAP;;AAIJ,SAAKT,cAAL;AACI,aAAO,EACH,GAAGI,KADA;AAEHG,QAAAA,cAAc,EAAEH,KAAK,CAACG,cAAN,CAAqBG,MAArB,CAA4BC,KAAK,IAAIA,KAAK,CAACC,GAAN,KAAcP,MAAM,CAACG,OAA1D;AAFb,OAAP;;AAIJ,SAAKN,eAAL;AACI,aAAO,EACH,GAAGE,KADA;AAEHG,QAAAA,cAAc,EAAEH,KAAK,CAACG,cAAN,CAAqBM,GAArB,CAAyBF,KAAK,IAAIA,KAAK,CAACC,GAAN,KAAcP,MAAM,CAACG,OAAP,CAAeI,GAA7B,GAAmCP,MAAM,CAACG,OAA1C,GAAmDG,KAArF;AAFb,OAAP;;AAIJ;;;;;;;;;AAQA,SAAKV,YAAL;AACI,aAAO,EACH,GAAGG,KADA;AAEHU,QAAAA,iBAAiB,EAAET,MAAM,CAACG;AAFvB,OAAP;AAID;AACA;;AACA;;;;;;;;;AAQH,SAAKL,aAAL;AACI,aAAO,EACH,GAAGC,KADA;AAEHU,QAAAA,iBAAiB,EAAE;AAFhB,OAAP;;AAIJ;AACI,aAAOV,KAAP;AAnER;AAqEH,CAtED","sourcesContent":["import { \n    TAREAS_PROYECTO,\n    //AGREGAR_PROYECTO,\n    AGREAGAR_TAREA,\n    VALIDAR_TAREA,\n    ELIMINAR_TAREA,\n    //ESTADO_TAREA, \n    TAREA_ACTUAL,\n    ACTUALIAR_TAREA,\n    LIMPIAR_TAREA\n} from '../../types';\n\n\n\nexport default (state, action) => {\n    switch(action.type){\n        case TAREAS_PROYECTO:\n            return {\n                ...state,\n                //en tareasproyecto su valor será el state.tareas.filter y cuando la tarea cuyo proyectoId \n                //es igual al del payload es que se van agregar, ej payloadId = 1\n                //tareasproyecto: state.tareasproyecto.filter(tarea => tarea.proyectoId === action.payload)\n                //se comentó filter porque ahora se hace desde la API del backend en tareaController get\n                tareasproyecto: action.payload\n            }\n        \n        case AGREAGAR_TAREA:\n            return {\n                ...state,\n                //tareas viene del state principal en TareaState = props...\n                //agregamos el arreglo de tareas que ya tenemos y le \n                //agregamos otra\n                //al cambiar de tareas: [...state.tareas, action.payload],\n                //a tareas: [...action.payload],state.tareas -> agregará las tareas en primer lugar de la lista\n                tareasproyecto: [action.payload, ...state.tareasproyecto],\n                //con errortarea: false se resetea el mensaje de error en caso de activarse\n                errortarea: false\n            }\n        case VALIDAR_TAREA:\n            return {\n                ...state,\n                errortarea: true\n            }\n        case ELIMINAR_TAREA:\n            return {\n                ...state,\n                tareasproyecto: state.tareasproyecto.filter(tarea => tarea._id !== action.payload )\n            }\n        case ACTUALIAR_TAREA:\n            return {\n                ...state,\n                tareasproyecto: state.tareasproyecto.map(tarea => tarea._id === action.payload._id ? action.payload: tarea )\n            }\n        /*\n        case ESTADO_TAREA:\n            return {\n                ...state,\n                tareasproyecto: state.tareasproyecto.map(tarea => tarea.id === action.payload.id ? \n                action.payload: tarea )\n            }\n            */\n        case TAREA_ACTUAL:\n            return {\n                ...state,\n                tareaseleccionada: action.payload\n           }\n           //en ACTUALIAR_TAREA tareas: tiene la misma funcion que ESTADO_TAREA\n           //-> su puede colocar sobre el case de ESTADO_TAREA\n           /*\n        case ACTUALIAR_TAREA:\n            return {\n                ...state,\n                tareas: state.tareas.map(tarea => tarea.id === action.payload.id ? \n                action.payload: tarea )\n            }\n            */ \n        case LIMPIAR_TAREA:\n            return {\n                ...state,\n                tareaseleccionada: null\n            }   \n        default:\n            return state;\n    }\n}"]},"metadata":{},"sourceType":"module"}