{"ast":null,"code":"var _jsxFileName = \"D:\\\\Scripts\\\\React103\\\\cliente\\\\src\\\\components\\\\tareas\\\\FormTarea.js\";\nimport React, { useContext, useState, useEffect } from 'react';\nimport proyectoContext from '../../context/proyectos/proyectoContext';\nimport tareaContext from '../../context/tareas/tareaContext'; //Proyectocontext tiene todo el state y las funciones\n\nconst FormTarea = () => {\n  //Extraer si un proyecto esta activo\n  const proyectosContext = useContext(proyectoContext);\n  const {\n    proyecto\n  } = proyectosContext; //Obtener la funcion del Context de tareas\n  //se recomienda importar los states primero y las funciones despues\n\n  const tareasContext = useContext(tareaContext);\n  const {\n    tareaseleccionada,\n    errortarea,\n    agregarTarea,\n    validarTarea,\n    obtenerTareas,\n    actualizarTarea,\n    limpiarTarea\n  } = tareasContext; //Effect que detecta si hay una tarea seleccionada\n\n  useEffect(() => {\n    if (tareaseleccionada !== null) {\n      guardarTarea(tareaseleccionada);\n    } else {\n      guardarTarea({\n        nombre: ''\n      });\n    }\n  }, [tareaseleccionada]); //State del formulario\n  //Array destructuring para ecxtarer el proyecto actual\n\n  const [tarea, guardarTarea] = useState({\n    nombre: ''\n  }); //extraer el nombre del proyecto con destructuring\n\n  const {\n    nombre\n  } = tarea; //si no hay ningun proyecto seleccionado\n\n  if (!proyecto) return null; //Array destructuring para ecxtarer el proyecto actual\n\n  const [proyectoActual] = proyecto; //Leer los valores del formulario\n\n  const handleChange = e => {\n    guardarTarea({ ///obtendremos una copia de las tareas\n      //si queremos agregar mas campo a futuro\n      //no va a ser necesario modificar esta funcion\n      ...tarea,\n      [e.target.name]: e.target.value\n    });\n  }; //evento para agregar tarea cuando aprete click\n\n\n  const onSubmit = e => {\n    e.preventDefault(); //ahora hay que hacer estas acciones\n    //validar tarea, trim remmueve espacios vacios, === a string vacio\n\n    if (nombre.trim() === '') {\n      validarTarea(); //return para que no se ejecute la proxima linea se detenga la efecucion\n\n      return;\n    } //Si es edicion o si es nueva tarea\n\n\n    if (tareaseleccionada === null) {\n      //agregar la nueva tarea al state de tareas\n      tarea.proyectoId = proyectoActual.id;\n      tarea.estado = false;\n      agregarTarea(tarea);\n    } else {\n      //actualizar tarea existente\n      actualizarTarea(tarea); //Elimina tarea seleccionada del state\n\n      limpiarTarea(tarea);\n    } //pasar la validacion\n    //Obtener y filtrar kas tareas del proyecto actual\n    //con proyectoActual.id toma el id como payload\n\n\n    obtenerTareas(proyectoActual.id); //reiniciar el formulario\n\n    guardarTarea({\n      nombre: ''\n    });\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"formulario\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"form\", {\n    //agregaremos un evento para agregar tareas\n    onSubmit: onSubmit,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"contenedor-input\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(\"input\", {\n    type: \"text\",\n    className: \"input-text\",\n    placeholder: \"Nombre de la Tarea..\",\n    name: \"nombre\" //con value se reinicia el form\n    ,\n    value: nombre,\n    onChange: handleChange,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 21\n    }\n  })), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"contenedor-input\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(\"input\", {\n    type: \"submit\",\n    className: \"btn btn-primario btn-submit btn-block\" //si tenemos una tarea seleccionada y no esta como null -> va a ser editar\n    //caso contrario va a ser agregar tarea\n    ,\n    value: tareaseleccionada ? 'Editar Tarea' : 'Agregar Tarea',\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 21\n    }\n  }))), errortarea ? /*#__PURE__*/React.createElement(\"p\", {\n    className: \"mensaje error\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 125,\n      columnNumber: 27\n    }\n  }, \"El nombre de la tarea es obligatorio\") : null);\n};\n\nexport default FormTarea;","map":{"version":3,"sources":["D:/Scripts/React103/cliente/src/components/tareas/FormTarea.js"],"names":["React","useContext","useState","useEffect","proyectoContext","tareaContext","FormTarea","proyectosContext","proyecto","tareasContext","tareaseleccionada","errortarea","agregarTarea","validarTarea","obtenerTareas","actualizarTarea","limpiarTarea","guardarTarea","nombre","tarea","proyectoActual","handleChange","e","target","name","value","onSubmit","preventDefault","trim","proyectoId","id","estado"],"mappings":"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","sourcesContent":["import React, { useContext, useState, useEffect } from 'react';\r\nimport proyectoContext from '../../context/proyectos/proyectoContext';\r\nimport tareaContext from '../../context/tareas/tareaContext';\r\n\r\n\r\n//Proyectocontext tiene todo el state y las funciones\r\n\r\nconst FormTarea = () => {\r\n\r\n    //Extraer si un proyecto esta activo\r\n    const proyectosContext = useContext(proyectoContext);\r\n    const { proyecto } = proyectosContext;\r\n    \r\n    //Obtener la funcion del Context de tareas\r\n    //se recomienda importar los states primero y las funciones despues\r\n    const tareasContext = useContext(tareaContext);\r\n    const { tareaseleccionada, errortarea, agregarTarea, validarTarea, obtenerTareas,\r\n    actualizarTarea, limpiarTarea } = \r\n    tareasContext;\r\n    \r\n    //Effect que detecta si hay una tarea seleccionada\r\n    useEffect(() => {\r\n        if(tareaseleccionada !== null) {\r\n            guardarTarea(tareaseleccionada)\r\n        } else {\r\n            guardarTarea({\r\n                nombre: ''\r\n            })\r\n        }\r\n    }, [tareaseleccionada]);\r\n\r\n    //State del formulario\r\n    //Array destructuring para ecxtarer el proyecto actual\r\n    const [tarea, guardarTarea] = useState({\r\n        nombre: ''\r\n    })\r\n\r\n    //extraer el nombre del proyecto con destructuring\r\n    const { nombre } = tarea;\r\n    \r\n    //si no hay ningun proyecto seleccionado\r\n    if(!proyecto) return null;\r\n\r\n    //Array destructuring para ecxtarer el proyecto actual\r\n    const [proyectoActual] = proyecto;\r\n\r\n    //Leer los valores del formulario\r\n    const handleChange = e => {\r\n        guardarTarea({\r\n            ///obtendremos una copia de las tareas\r\n            //si queremos agregar mas campo a futuro\r\n            //no va a ser necesario modificar esta funcion\r\n            ...tarea,\r\n            [e.target.name] : e.target.value\r\n        })\r\n    }\r\n    \r\n    //evento para agregar tarea cuando aprete click\r\n    const onSubmit = e => {\r\n        e.preventDefault();\r\n        //ahora hay que hacer estas acciones\r\n\r\n        //validar tarea, trim remmueve espacios vacios, === a string vacio\r\n        if(nombre.trim() === '') {\r\n            validarTarea();\r\n            //return para que no se ejecute la proxima linea se detenga la efecucion\r\n            return;\r\n        }\r\n\r\n        //Si es edicion o si es nueva tarea\r\n        if(tareaseleccionada === null) {\r\n            //agregar la nueva tarea al state de tareas\r\n            tarea.proyectoId = proyectoActual.id;\r\n            tarea.estado = false;\r\n            agregarTarea(tarea);\r\n        } else {\r\n            //actualizar tarea existente\r\n            actualizarTarea(tarea);\r\n\r\n            //Elimina tarea seleccionada del state\r\n            limpiarTarea(tarea);\r\n        }\r\n        //pasar la validacion\r\n\r\n\r\n        //Obtener y filtrar kas tareas del proyecto actual\r\n        //con proyectoActual.id toma el id como payload\r\n        obtenerTareas(proyectoActual.id)\r\n        \r\n        //reiniciar el formulario\r\n        guardarTarea({\r\n            nombre: ''\r\n        })\r\n    }\r\n\r\n    return (\r\n        <div className=\"formulario\">\r\n            <form\r\n            //agregaremos un evento para agregar tareas\r\n                onSubmit={onSubmit}\r\n            >\r\n                <div className=\"contenedor-input\">\r\n                    <input \r\n                        type=\"text\"\r\n                        className=\"input-text\"\r\n                        placeholder=\"Nombre de la Tarea..\"\r\n                        name=\"nombre\"\r\n                        //con value se reinicia el form\r\n                        value={nombre}\r\n                        onChange={handleChange}\r\n                    />\r\n                </div>\r\n\r\n                <div className=\"contenedor-input\">\r\n                    <input\r\n                        type=\"submit\"\r\n                        className=\"btn btn-primario btn-submit btn-block\"\r\n                        //si tenemos una tarea seleccionada y no esta como null -> va a ser editar\r\n                        //caso contrario va a ser agregar tarea\r\n                        value={tareaseleccionada ? 'Editar Tarea' : 'Agregar Tarea'}\r\n                    />\r\n                </div>\r\n\r\n            </form>\r\n            {errortarea ? <p className=\"mensaje error\">El nombre de la tarea es obligatorio</p>\r\n            : null }\r\n        </div>\r\n\r\n    );\r\n}\r\n\r\n\r\n\r\nexport default FormTarea;"]},"metadata":{},"sourceType":"module"}