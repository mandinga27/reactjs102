{"ast":null,"code":"import { TAREAS_PROYECTO, AGREGAR_PROYECTO, AGREAGAR_TAREA, VALIDAR_TAREA, ELIMINAR_TAREA, ESTADO_TAREA, TAREA_ACTUAL, ACTUALIAR_TAREA, LIMPIAR_TAREA } from '../../types';\nexport default ((state, action) => {\n  switch (action.type) {\n    case TAREAS_PROYECTO:\n      return { ...state,\n        //en tareasproyecto su valor ser치 el state.tareas.filter y cuando la tarea cuyo proyectoId \n        //es igual al del payload es que se van agregar, ej payloadId = 1\n        tareasproyecto: state.tareas.filter(tarea => tarea.proyectoId === action.payload)\n      };\n\n    case AGREAGAR_TAREA:\n      return { ...state,\n        //tareas viene del state principal en TareaState = props...\n        //agregamos el arreglo de tareas que ya tenemos y le \n        //agregamos otra\n        //al cambiar de tareas: [...state.tareas, action.payload],\n        //a tareas: [...action.payload],state.tareas -> agregar치 las tareas en primer lugar de la lista\n        tareas: [action.payload, ...state.tareas],\n        //con errortarea: false se resetea el mensaje de error en caso de activarse\n        errortarea: false\n      };\n\n    case VALIDAR_TAREA:\n      return { ...state,\n        errortarea: true\n      };\n\n    case ELIMINAR_TAREA:\n      return { ...state,\n        tareas: state.tareas.filter(tarea => tarea.id !== action.payload)\n      };\n\n    case ACTUALIAR_TAREA:\n    case ESTADO_TAREA:\n      return { ...state,\n        tareas: state.tareas.map(tarea => tarea.id === action.payload.id ? action.payload : tarea)\n      };\n\n    case TAREA_ACTUAL:\n      return { ...state,\n        tareaseleccionada: action.payload\n      };\n    //en ACTUALIAR_TAREA tareas: tiene la misma funcion que ESTADO_TAREA\n    //-> su puede colocar sobre el case de ESTADO_TAREA\n\n    /*\r\n    case ACTUALIAR_TAREA:\r\n     return {\r\n         ...state,\r\n         tareas: state.tareas.map(tarea => tarea.id === action.payload.id ? \r\n         action.payload: tarea )\r\n     }\r\n     */\n\n    case LIMPIAR_TAREA:\n      return { ...state,\n        tareaseleccionada: null\n      };\n\n    default:\n      return state;\n  }\n});","map":{"version":3,"sources":["D:/Scripts/React103/cliente/src/context/tareas/tareaReducer.js"],"names":["TAREAS_PROYECTO","AGREGAR_PROYECTO","AGREAGAR_TAREA","VALIDAR_TAREA","ELIMINAR_TAREA","ESTADO_TAREA","TAREA_ACTUAL","ACTUALIAR_TAREA","LIMPIAR_TAREA","state","action","type","tareasproyecto","tareas","filter","tarea","proyectoId","payload","errortarea","id","map","tareaseleccionada"],"mappings":"AAAA,SACIA,eADJ,EAEIC,gBAFJ,EAGIC,cAHJ,EAIIC,aAJJ,EAKIC,cALJ,EAMIC,YANJ,EAOIC,YAPJ,EAQIC,eARJ,EASIC,aATJ,QAUO,aAVP;AAcA,gBAAe,CAACC,KAAD,EAAQC,MAAR,KAAmB;AAC9B,UAAOA,MAAM,CAACC,IAAd;AACI,SAAKX,eAAL;AACI,aAAO,EACH,GAAGS,KADA;AAEH;AACA;AACAG,QAAAA,cAAc,EAAEH,KAAK,CAACI,MAAN,CAAaC,MAAb,CAAoBC,KAAK,IAAIA,KAAK,CAACC,UAAN,KAAqBN,MAAM,CAACO,OAAzD;AAJb,OAAP;;AAOJ,SAAKf,cAAL;AACI,aAAO,EACH,GAAGO,KADA;AAEH;AACA;AACA;AACA;AACA;AACAI,QAAAA,MAAM,EAAE,CAACH,MAAM,CAACO,OAAR,EAAiB,GAAGR,KAAK,CAACI,MAA1B,CAPL;AAQH;AACAK,QAAAA,UAAU,EAAE;AATT,OAAP;;AAWJ,SAAKf,aAAL;AACI,aAAO,EACH,GAAGM,KADA;AAEHS,QAAAA,UAAU,EAAE;AAFT,OAAP;;AAIJ,SAAKd,cAAL;AACI,aAAO,EACH,GAAGK,KADA;AAEHI,QAAAA,MAAM,EAAEJ,KAAK,CAACI,MAAN,CAAaC,MAAb,CAAoBC,KAAK,IAAIA,KAAK,CAACI,EAAN,KAAaT,MAAM,CAACO,OAAjD;AAFL,OAAP;;AAIJ,SAAKV,eAAL;AACA,SAAKF,YAAL;AACI,aAAO,EACH,GAAGI,KADA;AAEHI,QAAAA,MAAM,EAAEJ,KAAK,CAACI,MAAN,CAAaO,GAAb,CAAiBL,KAAK,IAAIA,KAAK,CAACI,EAAN,KAAaT,MAAM,CAACO,OAAP,CAAeE,EAA5B,GAClCT,MAAM,CAACO,OAD2B,GAClBF,KADR;AAFL,OAAP;;AAKJ,SAAKT,YAAL;AACI,aAAO,EACH,GAAGG,KADA;AAEHY,QAAAA,iBAAiB,EAAEX,MAAM,CAACO;AAFvB,OAAP;AAID;AACA;;AACA;;;;;;;;;AAQH,SAAKT,aAAL;AACI,aAAO,EACH,GAAGC,KADA;AAEHY,QAAAA,iBAAiB,EAAE;AAFhB,OAAP;;AAIJ;AACI,aAAOZ,KAAP;AA3DR;AA6DH,CA9DD","sourcesContent":["import { \r\n    TAREAS_PROYECTO,\r\n    AGREGAR_PROYECTO,\r\n    AGREAGAR_TAREA,\r\n    VALIDAR_TAREA,\r\n    ELIMINAR_TAREA,\r\n    ESTADO_TAREA,\r\n    TAREA_ACTUAL,\r\n    ACTUALIAR_TAREA,\r\n    LIMPIAR_TAREA\r\n} from '../../types';\r\n\r\n\r\n\r\nexport default (state, action) => {\r\n    switch(action.type){\r\n        case TAREAS_PROYECTO:\r\n            return {\r\n                ...state,\r\n                //en tareasproyecto su valor ser치 el state.tareas.filter y cuando la tarea cuyo proyectoId \r\n                //es igual al del payload es que se van agregar, ej payloadId = 1\r\n                tareasproyecto: state.tareas.filter(tarea => tarea.proyectoId === action.payload)\r\n            }\r\n        \r\n        case AGREAGAR_TAREA:\r\n            return {\r\n                ...state,\r\n                //tareas viene del state principal en TareaState = props...\r\n                //agregamos el arreglo de tareas que ya tenemos y le \r\n                //agregamos otra\r\n                //al cambiar de tareas: [...state.tareas, action.payload],\r\n                //a tareas: [...action.payload],state.tareas -> agregar치 las tareas en primer lugar de la lista\r\n                tareas: [action.payload, ...state.tareas],\r\n                //con errortarea: false se resetea el mensaje de error en caso de activarse\r\n                errortarea: false\r\n            }\r\n        case VALIDAR_TAREA:\r\n            return {\r\n                ...state,\r\n                errortarea: true\r\n            }\r\n        case ELIMINAR_TAREA:\r\n            return {\r\n                ...state,\r\n                tareas: state.tareas.filter(tarea => tarea.id !== action.payload)\r\n            }\r\n        case ACTUALIAR_TAREA:\r\n        case ESTADO_TAREA:\r\n            return {\r\n                ...state,\r\n                tareas: state.tareas.map(tarea => tarea.id === action.payload.id ? \r\n                action.payload: tarea )\r\n            }\r\n        case TAREA_ACTUAL:\r\n            return {\r\n                ...state,\r\n                tareaseleccionada: action.payload\r\n           }\r\n           //en ACTUALIAR_TAREA tareas: tiene la misma funcion que ESTADO_TAREA\r\n           //-> su puede colocar sobre el case de ESTADO_TAREA\r\n           /*\r\n        case ACTUALIAR_TAREA:\r\n            return {\r\n                ...state,\r\n                tareas: state.tareas.map(tarea => tarea.id === action.payload.id ? \r\n                action.payload: tarea )\r\n            }\r\n            */ \r\n        case LIMPIAR_TAREA:\r\n            return {\r\n                ...state,\r\n                tareaseleccionada: null\r\n            }   \r\n        default:\r\n            return state;\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}